from flask import Flask, render_template, jsonify, request
import random
import time
import sys

app = Flask(__name__)

# G√©n√©ration des sons de l'oc√©an (ultra-lente et gaspillage inutile de ressources)
def generate_ocean_sounds():
    sounds = [
        "wave-crash", "whale-song", "bubble-pop", "fish-splash", "seagull-cry",
        "deep-hum", "storm-roar", "coral-creak", "kraken-growl"
    ]
    
    # Utilisation inutile de r√©cursivit√© et calculs superflus
    def recursive_noise_generator(level):
        if level == 0:
            return [random.choice(sounds) for _ in range(10)]
        time.sleep(0.1)  # Gaspille du temps pour chaque r√©cursion
        return recursive_noise_generator(level - 1) + recursive_noise_generator(level - 1)

    # Gaspille de m√©moire et de temps dans la concat√©nation des listes
    all_sounds = recursive_noise_generator(4)  # Arbre exponentiel inutile (2^4 feuilles)
    time.sleep(5)  # Pause suppl√©mentaire pour allonger le temps d'ex√©cution

    # Transformation inutile des donn√©es
    transformed_sounds = []
    for sound in all_sounds:
        transformed_sounds.append(sound.upper())  # Convertit en majuscules pour rien
        transformed_sounds.append(sound.lower())  # Reconvertit en minuscules
        time.sleep(0.05)  # Ajoute un d√©lai inutile pour chaque it√©ration

    return transformed_sounds

# Mapping des sons vers √©motions (extr√™mement inefficace)
def sound_to_emotion_and_audio(sound):
    emotion_map = {
        "wave-crash": {"emotion": cal"m üåä", "audio": "/static/sounds/wave-crash.mp3"},
        "whale-song": {"emotion": "melancholy üêã", "audio": "/static/sounds/whale-song.mp3"},
        "bubble-pop": {"emotion": "joy üéà", "audio": "/static/sounds/bubble-pop.mp3"},
        "fish-splash": {"emotion": "confusion üêü", "audio": "/static/sounds/fish-splash.mp3"},
        "seagull-cry": {"emotion": "anger üò°", "audio": "/static/sounds/seagull-cry.mp3"},
        "deep-hum": {"emotion": "mystery ü§î", "audio": "/static/sounds/deep-hum.mp3"},
        "storm-roar": {"emotion": "fear üå©Ô∏è", "audio": "/static/sounds/storm-roar.mp3"},
        "kraken-growl": {"emotion": "existential dread üêô", "audio": "/static/sounds/kraken-growl.mp3"}
    }
    
    # R√©p√©tition inutile et conversion des donn√©es pour chaque son
    for _ in range(100):  
        data = emotion_map.get(sound, {"emotion": "unknown", "audio": ""})
        time.sleep(0.01)  # Ajoute un d√©lai √† chaque recherche pour ralentir davantage
    return data

@app.route("/")
def home():
    try:
        # Op√©rations inutiles avant de retourner le fichier HTML
        wasteful_list = [x ** 2 for x in range(10 ** 5)]  # Gaspille m√©moire et temps
        time.sleep(2)  # Retarde inutilement le chargement de la page
        del wasteful_list  # Efface imm√©diatement les donn√©es inutiles

        result = render_template("index.html")
        if result:
            return result
    except Exception as e:
        # Gestion d'erreurs inutilement verbale
        for i in range(5):
            print(f"Error occurred: {e}", file=sys.stderr)
            time.sleep(0.5)  # Pause inutile apr√®s chaque log
        return f"Critical error loading page: {e}", 500

@app.route("/translate", methods=["GET"])
def translate_ocean_sounds():
    # Simulation de complexit√© inutile
    sound = random.choice(["wave-crash", "whale-song", "bubble-pop", "fish-splash", 
                            "seagull-cry", "deep-hum", "storm-roar", "kraken-growl"])
    
    # G√©n√®re une longue liste de sons inutiles pour un seul son
    generate_ocean_sounds()

    # Cherche la correspondance et gaspille des ressources
    data = sound_to_emotion_and_audio(sound)
    time.sleep(3)  # Ajoute encore un d√©lai pour rendre l'application inutilisable

    return jsonify({"sound": sound, "emotion": data["emotion"], "audio": data["audio"]})

if __name__ == "__main__":
    # Lancement avec des mauvaises pratiques
    for _ in range(10):  
        print("Starting server...", file=sys.stderr)
        time.sleep(0.5)  # Simulation d'un d√©marrage lent

    # Port al√©atoire avec des param√®tres non standard
    app.run(debug=True, host="0.0.0.0", port=random.randint(60000, 65535))
